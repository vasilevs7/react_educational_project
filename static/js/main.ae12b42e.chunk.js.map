{"version":3,"sources":["WeatherDisplay.js","PLACES.js","App.js","serviceWorker.js","index.js"],"names":["WeatherDisplay","state","weatherData","zip","this","props","fetch","then","res","json","setState","weather","iconUrl","icon","main","name","src","alt","description","temp","temp_max","temp_min","wind","speed","Component","PLACES","App","activePlace","Header","Brand","md","sm","bsStyle","stacked","activeKey","onSelect","index","map","place","key","eventKey","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oQAuCeA,E,YApCb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,YAAa,MAHH,E,iFAOO,IAAD,OACZC,EAAMC,KAAKC,MAAMF,IAGvBG,MAFY,qDACVH,EAAM,wDACGI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAE,GACtC,EAAKC,SAAS,CAAER,YAAaO,S,+BAK/B,IAAMP,EAAcE,KAAKH,MAAMC,YAC/B,IAAKA,EAAa,OAAO,2CACzB,IAAMS,EAAUT,EAAYS,QAAQ,GAC9BC,EAAU,mCAAqCD,EAAQE,KAAO,OACpE,OACE,6BACE,4BACGF,EAAQG,KADX,OACqBZ,EAAYa,KAC/B,yBAAKC,IAAKJ,EAASK,IAAKf,EAAYgB,eAEtC,uCAAahB,EAAYY,KAAKK,KAA9B,QACA,oCAAUjB,EAAYY,KAAKM,SAA3B,QACA,mCAASlB,EAAYY,KAAKO,SAA1B,QACA,0CAAgBnB,EAAYoB,KAAKC,MAAjC,e,GA/BqBC,aCFhBC,EAAS,CACpB,CAACV,KAAK,eAAgBZ,IAAK,UAC3B,CAACY,KAAK,SAAUZ,IAAK,UACrB,CAACY,KAAK,mBAAoBZ,IAAK,UAC/B,CAACY,KAAK,aAAcZ,IAAK,YCkDZuB,E,YARb,aAAe,IAAD,8BACZ,+CACKzB,MAAQ,CACX0B,YAAa,GAHH,E,sEArCJ,IAAD,OACDA,EAAcvB,KAAKH,MAAM0B,YAC/B,OACE,6BACE,kBAAC,IAAD,KACC,kBAAC,IAAOC,OAAR,KACE,kBAAC,IAAOC,MAAR,mCAKH,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,GAAI,EAAGC,GAAI,GACd,6CACA,kBAAC,IAAD,CACEC,QAAQ,QACRC,SAAO,EACPC,UAAWP,EACXQ,SAAU,SAAAC,GACR,EAAK1B,SAAS,CAAEiB,YAAYS,MAG7BX,EAAOY,KAAI,SAACC,EAAOF,GAAR,OACV,kBAAC,IAAD,CAASG,IAAKH,EAAOI,SAAUJ,GAAQE,EAAMvB,WAInD,kBAAC,IAAD,CAAKe,GAAI,EAAGC,GAAI,GACd,kBAAC,EAAD,CAAgBQ,IAAKZ,EAAaxB,IAAKsB,EAAOE,GAAaxB,c,GA9BvDqB,aCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,iB","file":"static/js/main.ae12b42e.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\nclass WeatherDisplay extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weatherData: null\n    };\n  }\n\n  componentDidMount() {\n    const zip = this.props.zip;\n    const URL = \"http://api.openweathermap.org/data/2.5/weather?id=\" + \n      zip + \"&appid=b1b35bba8b434a28a0be2a3e1071ae5b&units=metric\";\n    fetch(URL).then(res => res.json()).then(json => {\n      this.setState({ weatherData: json });\n    });\n  }\n\n  render() {\n    const weatherData = this.state.weatherData;\n    if (!weatherData) return <div>Loading...</div>;\n    const weather = weatherData.weather[0];\n    const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\n    return (\n      <div>\n        <h1>\n          {weather.main} in {weatherData.name}\n          <img src={iconUrl} alt={weatherData.description} />\n        </h1>\n        <p>Current: {weatherData.main.temp}°</p>\n        <p>High: {weatherData.main.temp_max}°</p>\n        <p>Low: {weatherData.main.temp_min}°</p>\n        <p>Wind Speed: {weatherData.wind.speed} km/hr</p>\n      </div>\n    );\n  }\n}\n\nexport default WeatherDisplay;\n","export const PLACES = [\n  {name:\"Dolgoprudnyy\", zip: \"565614\" },\n  {name:\"Moscow\", zip: \"524901\" },\n  {name:\"Saint Petersburg\", zip: \"498817\" },\n  {name:\"Cheboksary\", zip: \"6198442\" }\n];\n\nexport default {\n  PLACES,\n}\n","import React, {Component} from 'react';\nimport './App.css';\n//import \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootswatch/darkly/bootstrap.css\";\nimport { Navbar, NavItem, Nav, Grid, Row, Col } from \"react-bootstrap\";\nimport WeatherDisplay from './WeatherDisplay.js';\nimport {PLACES} from './PLACES.js';\n\nclass App extends Component {\n  render() {\n    const activePlace = this.state.activePlace;\n    return (\n      <div>\n        <Navbar>\n         <Navbar.Header>\n           <Navbar.Brand>\n              React Simple Weather App\n            </Navbar.Brand>\n           </Navbar.Header>\n          </Navbar>\n        <Grid>\n          <Row>\n            <Col md={4} sm={4}>\n              <h3>Select a city</h3>\n              <Nav\n                bsStyle=\"pills\"\n                stacked\n                activeKey={activePlace}\n                onSelect={index => {\n                  this.setState({ activePlace:index });\n                }}\n              >\n                {PLACES.map((place, index) => (\n                  <NavItem key={index} eventKey={index}>{place.name}</NavItem>\n                ))}\n              </Nav>\n            </Col>\n            <Col md={8} sm={8}>\n              <WeatherDisplay key={activePlace} zip={PLACES[activePlace].zip} />\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n\n  constructor() {\n    super();\n    this.state = {\n      activePlace: 0,\n    };\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}